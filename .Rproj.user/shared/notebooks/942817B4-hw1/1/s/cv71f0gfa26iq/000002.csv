"0","# Calculates P(T=t) using recursion"
"0","fn_p_t <- function(alpha, beta, t) {"
"0","  if (t == 1) {"
"0","    p_t <- alpha / (alpha + beta)"
"0","    return(p_t)"
"0","  } else {"
"0","    p_t <- (beta + t - 2) / (alpha + beta + t - 1) * fn_p_t(alpha, beta, t -1) # Function calls itself"
"0","    return(p_t)"
"0","  }"
"0","}"
"0","# Calculates the log-likelihood of initial alpha and beta"
"0","# given data (in this case the percent customers alive from t = 1)"
"0","fn_max_ll <- function(par, percent_alive) {"
"0","  alpha <- par[1]"
"0","  beta <- par[2]"
"0","  "
"0","  len_alive <- length(percent_alive)"
"0","  "
"0","  percent_dead <- abs(diff(c(1, percent_alive)))"
"0","  p_t <- sapply(1:len_alive, function(x) {fn_p_t(alpha, beta, x)})"
"0","  s_t <- 1 - sum(p_t)"
"0","  "
"0","  ll <- sum((percent_dead * log(p_t)))  + percent_alive[length(percent_alive)] * log(s_t)"
"0","  "
"0","  return(-ll)"
"0","}"
"0","# Using calculated alpha and beta, predict the customers"
"0","# alive in each period"
"0","fn_sGB_predict <- function(alpha, beta, last_period) {"
"0","  p_t <- sapply(1:last_period, function(x) {fn_p_t(alpha, beta, x)})"
"0","  pred_surival <- 1 - cumsum(p_t)"
"0","  return(pred_surival)"
"0","}"
