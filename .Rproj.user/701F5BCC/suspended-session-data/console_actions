{
    "data" : [
        "  geom_text(data = estimation, aes(x = density, label = expression(alpha)))",
        "Error in as.data.frame.default(x[[i]], optional = TRUE) : \n  cannot coerce class \"\"expression\"\" to a data.frame\n",
        "> ",
        "  ",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid(calibration ~ customer_type) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = density, label = paste0(\"alpha = \", alpha)))",
        "Error: geom_text requires the following missing aesthetics: x, y\n",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid(calibration ~ customer_type) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = paste0(\"alpha = \", alpha)))",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid(calibration ~ customer_type) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = paste0(\"alpha = \", round(alpha), 2)))",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid(calibration ~ customer_type) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = paste0(\"alpha = \", round(alpha, 2))))",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid(calibration ~ customer_type) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = paste0(\"alpha = \", round(alpha, 2),'\\nbeta = ', round(beta,2))))",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid(calibration ~ customer_type) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f'))))",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f'))))",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f')))) +",
        "+ ",
        "  labs(x = expression(theta), y = \"Density\")",
        "> ",
        "estimation <-",
        "+ ",
        "  param_history %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    density = map2(alpha, beta, function(.x, .y) {rbeta(10000, .x, .y)})",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f')))) +",
        "+ ",
        "  labs(x = expression(theta), y = \"Density\")",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f')))) +",
        "+ ",
        "  labs(x = expression(theta), y = \"Density\")",
        "> ",
        "estimation <-",
        "+ ",
        "  param_history %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    density = map2(alpha, beta, function(.x, .y) {rbeta(100000, .x, .y)})",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f')))) +",
        "+ ",
        "  labs(x = expression(theta), y = \"Density\")",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f')))) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nE(theta)', formatC(alpha / (alpha + beta), digits = 2, format = 'f'))) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "+ ",
        "\n",
        "> ",
        "\n",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nE(theta)', formatC(alpha / (alpha + beta), digits = 2, format = 'f')))) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = expression(paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nE(theta) = ', formatC(alpha / (alpha + beta), digits = 2, format = 'f'))))) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "Don't know how to automatically pick scale for object of type expression. Defaulting to continuous.\n",
        "Error in as.data.frame.default(x[[i]], optional = TRUE) : \n  cannot coerce class \"\"expression\"\" to a data.frame\n",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, ",
        "+ ",
        "      label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nE(theta) = ', formatC(alpha / (alpha + beta), digits = 2, format = 'f'))), parse = T) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "> ",
        "estimation <-",
        "+ ",
        "  param_history %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    density = map2(alpha, beta, function(.x, .y) {rbeta(10000, .x, .y)})",
        "+ ",
        "  ) %>%",
        "+ ",
        "  mutate(label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nbeta = ', formatC(beta, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nE(theta) = ', formatC(alpha / (alpha + beta), digits = 2, format = 'f'))",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = label), parse = TRUE) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "> ",
        "estimation",
        "# A tibble: 4 × 6\n  customer_type calibration     alpha     beta        density                                      label\n          <chr>       <chr>     <dbl>    <dbl>         <list>                                      <chr>\n1       Regular    7-period 0.7039937 1.181936 <dbl [10,000]> alpha = 0.70\\nbeta = 1.18\\nE(theta) = 0.37\n2       Regular   10-period 0.6987252 1.172065 <dbl [10,000]> alpha = 0.70\\nbeta = 1.17\\nE(theta) = 0.37\n3      High End    7-period 0.6677123 3.802477 <dbl [10,000]> alpha = 0.67\\nbeta = 3.80\\nE(theta) = 0.15",
        "\n4      High End   10-period 0.6050467 3.388459 <dbl [10,000]> alpha = 0.61\\nbeta = 3.39\\nE(theta) = 0.15\n",
        "> ",
        "estimation <-",
        "+ ",
        "  param_history %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    density = map2(alpha, beta, function(.x, .y) {rbeta(10000, .x, .y)})",
        "+ ",
        "  ) %>%",
        "+ ",
        "  mutate(label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     ' beta = ', formatC(beta, digits = 2, format = 'f'),",
        "+ ",
        "                     ' E(theta) = ', formatC(alpha / (alpha + beta), digits = 2, format = 'f'))",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = label), parse = TRUE) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "Error in parse(text = as.character(lab)) : <text>:1:14: unexpected symbol\n1: alpha = 0.70 beta\n                 ^\n",
        "> ",
        "estimation <-",
        "+ ",
        "  param_history %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    density = map2(alpha, beta, function(.x, .y) {rbeta(10000, .x, .y)})",
        "+ ",
        "  ) %>%",
        "+ ",
        "  mutate(label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'),",
        "+ ",
        "                     '~beta = ', formatC(beta, digits = 2, format = 'f'),",
        "+ ",
        "                     '~E(theta) = ', formatC(alpha / (alpha + beta), digits = 2, format = 'f'))",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = label), parse = TRUE) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "> ",
        "estimation <-",
        "+ ",
        "  param_history %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    density = map2(alpha, beta, function(.x, .y) {rbeta(10000, .x, .y)})",
        "+ ",
        "  ) %>%",
        "+ ",
        "  mutate(label = paste0(\"alpha = \", formatC(alpha, digits = 2, format = 'f'))",
        "+ ",
        "                     #'~beta = ', formatC(beta, digits = 2, format = 'f'),",
        "+ ",
        "                     #'~E(theta) = ', formatC(alpha / (alpha + beta), digits = 2, format = 'f'))",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = label), parse = TRUE) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "> ",
        "estimation",
        "# A tibble: 4 × 6\n  customer_type calibration     alpha     beta        density        label\n          <chr>       <chr>     <dbl>    <dbl>         <list>        <chr>\n1       Regular    7-period 0.7039937 1.181936 <dbl [10,000]> alpha = 0.70\n2       Regular   10-period 0.6987252 1.172065 <dbl [10,000]> alpha = 0.70\n3      High End    7-period 0.6677123 3.802477 <dbl [10,000]> alpha = 0.67\n4      High End   10-period 0.6050467 3.388459 <dbl [10,000]> alpha = 0.61\n",
        "> ",
        "estimation <-",
        "+ ",
        "  param_history %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    density = map2(alpha, beta, function(.x, .y) {rbeta(10000, .x, .y)})",
        "+ ",
        "  ) %>%",
        "+ ",
        "  mutate(label = paste0(\"alpha == \", formatC(alpha, digits = 2, format = 'f'))",
        "+ ",
        "                     #'~beta = ', formatC(beta, digits = 2, format = 'f'),",
        "+ ",
        "                     #'~E(theta) = ', formatC(alpha / (alpha + beta), digits = 2, format = 'f'))",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = label), parse = TRUE) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "> ",
        "estimation <-",
        "+ ",
        "  param_history %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    density = map2(alpha, beta, function(.x, .y) {rbeta(10000, .x, .y)})",
        "+ ",
        "  ) %>%",
        "+ ",
        "  mutate(label = paste0(\"alpha == \", formatC(alpha, digits = 2, format = 'f'), ",
        "+ ",
        "                     '\\nbeta == ', formatC(beta, digits = 2, format = 'f'),",
        "+ ",
        "                     '\\nE(theta) == ', formatC(alpha / (alpha + beta), digits = 2, format = 'f'))",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = label), parse = TRUE) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "> ",
        "estimation <-",
        "+ ",
        "  param_history %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    density = map2(alpha, beta, function(.x, .y) {rbeta(10000, .x, .y)})",
        "+ ",
        "  ) %>%",
        "+ ",
        "  mutate(label = paste0(\"atop(alpha == \", formatC(alpha, digits = 2, format = 'f'), ",
        "+ ",
        "                     ',beta == ', formatC(beta, digits = 2, format = 'f'),",
        "+ ",
        "                     ',E(theta) == ', formatC(alpha / (alpha + beta), digits = 2, format = 'f'),\")\")",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "estimation",
        "# A tibble: 4 × 6\n  customer_type calibration     alpha     beta        density                                             label\n          <chr>       <chr>     <dbl>    <dbl>         <list>                                             <chr>\n1       Regular    7-period 0.7039937 1.181936 <dbl [10,000]> atop(alpha == 0.70,beta == 1.18,E(theta) == 0.37)\n2       Regular   10-period 0.6987252 1.172065 <dbl [10,000]> atop(alpha == 0.70,beta == 1.17,E(theta) == 0.37)\n3      High End    7-period 0.6677123 3.802477",
        " <dbl [10,000]> atop(alpha == 0.67,beta == 3.80,E(theta) == 0.15)\n4      High End   10-period 0.6050467 3.388459 <dbl [10,000]> atop(alpha == 0.61,beta == 3.39,E(theta) == 0.15)\n",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = label), parse = TRUE) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "> ",
        "estimation <-",
        "+ ",
        "  param_history %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    density = map2(alpha, beta, function(.x, .y) {rbeta(10000, .x, .y)})",
        "+ ",
        "  ) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    label1 = paste0(\"atop(alpha == \", formatC(alpha, digits = 2, format = 'f'), ",
        "+ ",
        "                     ',beta == ', formatC(beta, digits = 2, format = 'f'),')'),",
        "+ ",
        "    label2 = paste0('E(theta) == ', formatC(alpha / (alpha + beta), digits = 2, format = 'f'))",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = label1), parse = TRUE) +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 3.5, label = label2), parse = TRUE) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "> ",
        "estimation <-",
        "+ ",
        "  param_history %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    density = map2(alpha, beta, function(.x, .y) {rbeta(10000, .x, .y)})",
        "+ ",
        "  ) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    label1 = paste0(\"atop(alpha == \", formatC(alpha, digits = 2, format = 'f'), ",
        "+ ",
        "                     ',beta == ', formatC(beta, digits = 2, format = 'f'),')')",
        "+ ",
        "    , label2 = paste0('E(theta) == ', formatC(alpha / (alpha + beta), digits = 2, format = 'f'))",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "estimation %>%",
        "+ ",
        "  unnest() %>%",
        "+ ",
        "  ggplot(aes(x = density, colour = calibration, fill = calibration)) +",
        "+ ",
        "  geom_density(alpha = 1/3) +",
        "+ ",
        "  facet_grid( forcats::fct_rev(calibration) ~ forcats::fct_rev(customer_type)) +",
        "+ ",
        "  theme(legend.position = 'none') +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 4, label = label1), parse = TRUE) +",
        "+ ",
        "  geom_text(data = estimation, aes(x = .75, y = 3, label = label2), parse = TRUE) +",
        "+ ",
        "  labs(x = expression(theta), y = expression(f(theta)))",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12)",
        "   alpha beta  t\n1    0.5  0.5  1\n2    1.5  0.5  1\n3    0.5  1.5  1\n4    1.5  1.5  1\n5    0.5  0.5  2\n6    1.5  0.5  2\n7    0.5  1.5  2\n8    1.5  1.5  2\n9    0.5  0.5  3\n10   1.5  0.5  3\n11   0.5  1.5  3\n12   1.5  1.5  3\n13   0.5  0.5  4\n14   1.5  0.5  4\n15   0.5  1.5  4\n16   1.5  1.5  4\n17   0.5  0.5  5\n18   1.5  0.5  5\n19   0.5  1.5  5\n20   1.5  1.5  5\n21   0.5  0.5  6\n22   1.5  0.5  6\n23   0.5  1.5  6\n24   1.5  1.5  6\n25   0.5  0.5  7\n26   1.5  0.5  7\n27   0.5  1.5  7\n28   1.5  1.5  7\n29   0.5  0.5  8\n30",
        "   1.5  0.5  8\n31   0.5  1.5  8\n32   1.5  1.5  8\n33   0.5  0.5  9\n34   1.5  0.5  9\n35   0.5  1.5  9\n36   1.5  1.5  9\n37   0.5  0.5 10\n38   1.5  0.5 10\n39   0.5  1.5 10\n40   1.5  1.5 10\n41   0.5  0.5 11\n42   1.5  0.5 11\n43   0.5  1.5 11\n44   1.5  1.5 11\n45   0.5  0.5 12\n46   1.5  0.5 12\n47   0.5  1.5 12\n48   1.5  1.5 12\n",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(retention_rate = fn_retention(alpha, beta, t))",
        "Error in mutate_impl(.data, dots) : \n  could not find function \"fn_retention\"\n",
        "> ",
        "fn_retention <- function(alpha, beta, t) {",
        "+ ",
        "  return((beta + t - 1) / (alpha + beta + t - 1))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(retention_rate = fn_retention(alpha, beta, t))",
        "# A tibble: 48 × 4\n   alpha  beta     t retention_rate\n   <dbl> <dbl> <int>          <dbl>\n1    0.5   0.5     1      0.5000000\n2    1.5   0.5     1      0.2500000\n3    0.5   1.5     1      0.7500000\n4    1.5   1.5     1      0.5000000\n5    0.5   0.5     2      0.7500000\n6    1.5   0.5     2      0.5000000\n7    0.5   1.5     2      0.8333333\n8    1.5   1.5     2      0.6250000\n9    0.5   0.5     3      0.8333333\n10   1.5   0.5     3      0.6250000\n# ... with 38 more rows\n",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(retention_rate = fn_retention(alpha, beta, t))",
        "# A tibble: 48 × 4\n   alpha  beta     t retention_rate\n   <dbl> <dbl> <int>          <dbl>\n1    0.5   0.5     1      0.5000000\n2    1.5   0.5     1      0.2500000\n3    0.5   1.5     1      0.7500000\n4    1.5   1.5     1      0.5000000\n5    0.5   0.5     2      0.7500000\n6    1.5   0.5     2      0.5000000\n7    0.5   1.5     2      0.8333333\n8    1.5   1.5     2      0.6250000\n9    0.5   0.5     3      0.8333333\n10   1.5   0.5     3      0.6250000\n# ... with 38 more rows\n",
        "> ",
        "",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \" beta == \", beta)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  ggplot(aes(x = t, y = retention_rate)) +",
        "+ ",
        "  geom_line() +",
        "+ ",
        "  facet_wrap(~alpha_beta)",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \" beta == \", beta)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  ggplot(aes(x = t, y = retention_rate)) +",
        "+ ",
        "  geom_line() +",
        "+ ",
        "  facet_wrap(~alpha_beta, labeller= label_parsed)",
        "Error in parse(text = as.character(values)) : \n  <text>:1:14: unexpected symbol\n1: alpha == 0.5 beta\n                 ^\n",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \"~~ beta == \", beta)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  ggplot(aes(x = t, y = retention_rate)) +",
        "+ ",
        "  geom_line() +",
        "+ ",
        "  facet_wrap(~alpha_beta, labeller= label_parsed)",
        "> ",
        "library(forcats)",
        "> ",
        "",
        "> ",
        "fct_reorder2()",
        "Error in check_factor(f) : argument \"f\" is missing, with no default\n",
        "> ",
        "?fct_reorder2",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \"~~ beta == \", beta)",
        "+ ",
        "    , alpha_beta = fct_reorder2(alpha, beta)",
        "+ ",
        "  )",
        "Error in mutate_impl(.data, dots) : \n  `f` must be a factor (or character vector).\n",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \"~~ beta == \", beta)",
        "+ ",
        "    , alpha_beta = fct_reorder2(alpha_beta, alpha, beta)",
        "+ ",
        "  ) ",
        "# A tibble: 48 × 5\n   alpha  beta     t retention_rate                 alpha_beta\n   <dbl> <dbl> <int>          <dbl>                     <fctr>\n1    0.5   0.5     1      0.5000000 alpha == 0.5~~ beta == 0.5\n2    1.5   0.5     1      0.2500000 alpha == 1.5~~ beta == 0.5\n3    0.5   1.5     1      0.7500000 alpha == 0.5~~ beta == 1.5\n4    1.5   1.5     1      0.5000000 alpha == 1.5~~ beta == 1.5\n5    0.5   0.5     2      0.7500000 alpha == 0.5~~ beta == 0.5\n6    1.5   0.5     2      0.5000000 alpha == 1.5~~ beta == 0.5",
        "\n7    0.5   1.5     2      0.8333333 alpha == 0.5~~ beta == 1.5\n8    1.5   1.5     2      0.6250000 alpha == 1.5~~ beta == 1.5\n9    0.5   0.5     3      0.8333333 alpha == 0.5~~ beta == 0.5\n10   1.5   0.5     3      0.6250000 alpha == 1.5~~ beta == 0.5\n# ... with 38 more rows\n",
        "> ",
        "a <- expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \"~~ beta == \", beta)",
        "+ ",
        "    , alpha_beta = fct_reorder2(alpha_beta, alpha, beta)",
        "+ ",
        "  ) ",
        "> ",
        "a$alpha_beta",
        " [1] alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5\n [8] alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5\n[15] alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5",
        " alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5\n[22] alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5\n[29] alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5\n[36] alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5",
        " alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5\n[43] alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5\nLevels: alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5\n",
        "> ",
        "a <- expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \"~~ beta == \", beta)",
        "+ ",
        "    , alpha_beta = fct_reorder2(alpha_beta, beta, alpha)",
        "+ ",
        "  )",
        "> ",
        "a$alpha_beta",
        " [1] alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5\n [8] alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5\n[15] alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5",
        " alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5\n[22] alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5\n[29] alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5\n[36] alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5",
        " alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5\n[43] alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5\nLevels: alpha == 1.5~~ beta == 0.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5\n",
        "> ",
        "?last2",
        "No documentation for ‘last2’ in specified packages and libraries:\nyou could try ‘??last2’\n",
        "> ",
        "forcats::last2",
        "Error: 'last2' is not an exported object from 'namespace:forcats'\n",
        "> ",
        "a <- expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \"~~ beta == \", beta)",
        "+ ",
        "    , alpha_beta = fct_reorder2(alpha_beta, beta, alpha, .desc = FALSE)",
        "+ ",
        "  )",
        "> ",
        "a$alpha_beta",
        " [1] alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5\n [8] alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5\n[15] alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5",
        " alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5\n[22] alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5\n[29] alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5\n[36] alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5",
        " alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5\n[43] alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5\nLevels: alpha == 0.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 0.5 alpha == 1.5~~ beta == 1.5\n",
        "> ",
        "a <- expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \"~~ beta == \", beta)",
        "+ ",
        "    , alpha_beta = fct_reorder2(alpha_beta, beta, alpha, .desc = T)",
        "+ ",
        "  )",
        "> ",
        "a$alpha_beta",
        " [1] alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5\n [8] alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5\n[15] alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5",
        " alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5\n[22] alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5\n[29] alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5\n[36] alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5",
        " alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5\n[43] alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 1.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5 alpha == 1.5~~ beta == 1.5\nLevels: alpha == 1.5~~ beta == 0.5 alpha == 1.5~~ beta == 1.5 alpha == 0.5~~ beta == 0.5 alpha == 0.5~~ beta == 1.5\n",
        "> ",
        "?fct_recode",
        "> ",
        "?fct_relevel",
        "> ",
        "?fct_inorder",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  arrange(desc(beta), alpha) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \"~~ beta == \", beta)",
        "+ ",
        "    , alpha_beta = fct_inorder(alpha_beta)",
        "+ ",
        "  )",
        "# A tibble: 48 × 5\n   alpha  beta     t retention_rate                 alpha_beta\n   <dbl> <dbl> <int>          <dbl>                     <fctr>\n1    0.5   1.5     1      0.7500000 alpha == 0.5~~ beta == 1.5\n2    0.5   1.5     2      0.8333333 alpha == 0.5~~ beta == 1.5\n3    0.5   1.5     3      0.8750000 alpha == 0.5~~ beta == 1.5\n4    0.5   1.5     4      0.9000000 alpha == 0.5~~ beta == 1.5\n5    0.5   1.5     5      0.9166667 alpha == 0.5~~ beta == 1.5\n6    0.5   1.5     6      0.9285714 alpha == 0.5~~ beta == 1.5",
        "\n7    0.5   1.5     7      0.9375000 alpha == 0.5~~ beta == 1.5\n8    0.5   1.5     8      0.9444444 alpha == 0.5~~ beta == 1.5\n9    0.5   1.5     9      0.9500000 alpha == 0.5~~ beta == 1.5\n10   0.5   1.5    10      0.9545455 alpha == 0.5~~ beta == 1.5\n# ... with 38 more rows\n",
        "> ",
        "a <- expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  arrange(desc(beta), alpha) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \"~~ beta == \", beta)",
        "+ ",
        "    , alpha_beta = fct_inorder(alpha_beta)",
        "+ ",
        "  )",
        "> ",
        "levels(a$alpha_beta)",
        "[1] \"alpha == 0.5~~ beta == 1.5\" \"alpha == 1.5~~ beta == 1.5\" \"alpha == 0.5~~ beta == 0.5\" \"alpha == 1.5~~ beta == 0.5\"\n",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  arrange(desc(beta), alpha) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \"~~ beta == \", beta)",
        "+ ",
        "    , alpha_beta = fct_inorder(alpha_beta)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  ggplot(aes(x = t, y = retention_rate)) +",
        "+ ",
        "  geom_line() +",
        "+ ",
        "  facet_wrap(~alpha_beta, labeller= label_parsed)",
        "> ",
        "",
        "> ",
        "expand.grid(alpha = c(.5, 1.5), beta = c(.5, 1.5), t = 1:12) %>%",
        "+ ",
        "  as_tibble() %>%",
        "+ ",
        "  arrange(desc(beta), alpha) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    retention_rate = fn_retention(alpha, beta, t)",
        "+ ",
        "    , alpha_beta = paste0(\"alpha == \", alpha, \"~~ beta == \", beta)",
        "+ ",
        "    , alpha_beta = fct_inorder(alpha_beta)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  ggplot(aes(x = t, y = retention_rate)) +",
        "+ ",
        "  geom_line() +",
        "+ ",
        "  facet_wrap(~alpha_beta, labeller= label_parsed) +",
        "+ ",
        "  scale_x_continuous(breaks = scales::pretty_breaks()) +",
        "+ ",
        "  labs(x = \"Period\", y = \"Retention Rate\", title = \"Retention Rates for Different Parameters\")"
    ],
    "type" : [
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        3,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1
    ]
}